#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct queue
{
int size;
int *arr;
int f;
int b;
};
int isfull(struct queue*ptr)
{
if((ptr->b+1)%ptr->size==ptr->f)
{
return 1;
}
else
{
return 0;
}
};
int isempty(struct queue*ptr)
{
if(ptr->f==ptr->b)
{
return 0;
}
else
{
return 1;
}
};
void enqueue(struct queue*ptr,int val)
{
if(isfull(ptr))
{
printf("\t queue overflow \n");
}
else
{
ptr->b=ptr->b++;
ptr->arr[ptr->b]=val;
}
};
int dequeue(struct queue*ptr)
{
int val;
if(isempty(ptr))
{
printf("\t queue is underflow \n");
return -1;
}
else
{
ptr->f=(ptr->f++)%ptr->size;
val=ptr->arr[ptr->f];
return val;
}
};
void main()
{
struct queue q;
clrscr();
q.size=10;
q.arr=(int*)malloc(sizeof(int));
q.f=q.b=-1;
printf("\t our queue is created \n");
printf("\t queue before insertion is full %d \n",isfull(&q));
printf("\t queue before insertion is empty %d \n",isempty(&q));
enqueue(&q,21);
enqueue(&q,12);
enqueue(&q,34);
enqueue(&q,2);
enqueue(&q,87);
enqueue(&q,56);
enqueue(&q,43);
enqueue(&q,89);
enqueue(&q,78);
enqueue(&q,10);
printf("\t queue after insertion is full %d \n",isfull(&q));
printf("\t queue after insertion is empty %d \n",isempty(&q));
getch();
}
